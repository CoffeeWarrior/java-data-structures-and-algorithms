Classes Types And Objects

    public class Universe {
        public static void main(String[] args){
            System.out.println("Hello Universe!");
        }
    }

        -Every object is an instance of a class which defines the type of the object as well as the kind of operations that it performs

        -Data of java objects are stored in instance variables also called fields.If an object from some class is to store data, its class must specify the instance variables for such objects.
        -Instance variables can either come from base types, or refer to objects of other classes

    How Classes Are Declared

        public class Counter{
            protected int count; // a simple integer instance variable
            Counter(){ count = 0; } //the default constructor for a Counter object
            public int getCount() { return count; } //accessor method
            /* modifiers */
            public void incrementCount() { count++; } //increments the count
            public void decrementCount() { count--; } //decrements the count

        }

            -the counter class is public which means that any other class can create and use a Counter object
            -the counter class has one instance variable, an integer called count
                -the variable is initialized to zero in the consturctor 

    Class Modifiers
        -Class modifiers are optional keywords that precede the "class" keyword
            -We have already seen keyword "public"
        
        -public:
            -allows any other class to create and use an object of this type
        -abstract:
            -describes a class that has abstract methods
                -these are methods declared with the abstract keyword and are empty.
                -a class with only abstract methods and no instance variables is called an interface
        -final
            -describes a class that can have no subclasses
        
        -friendly
            -if the public class modifier is not used the class is considered friendly
            -this means that it can be used and instantiated by all classes in the same *package*
                -this is the default class modifier
    
    Base Types
        -boolean
        -char - 16 bit unicode character
        -byte - 8 bit signed twos complement integer
        -short - 16 bit signed twos complement integer
        -int - 32 bit signed twos complement integer
        -long - 64 bit signed twos complement integer
        -float - 32 bit floating point number
        -double - 64 bit floating point number

        public class Base{
            public static void main(String[] args){
                boolean flag = true;
                char ch = 'a';
                byte b = 12;
                short s = 24;
                int i = 257;
                long l = 890L; //note the usage of "L" here
                float f = 3.1415F; //note the usage of "F" here
                double d = 2.1828; 
            }
        }    
    
    Objects

        -in java new object is created from a defined class by using the "new" operator
            -the new operator creates a new object from a specified class and returns a *reference* to that object
        
        public class Example{
            public static void main (String[] args){
                Counter c;  //declares a new object C, of type Counter. c can refer to any Counter object
                Counter d = new Counter(); // creates a counter object D which is set equal to the reference returned by "new Counter();"
                c = new Counter(); //creates a new counter object and assigns C the reference to this new object
                d = c; //assigns d to the reference the same object as c (the object d was pointing to now has no variable referencing it)


            }
        }   
            -calling the "new" operator on a class type causes 3 events to occur:
                1. A new object is dynamically allocated in memory, and all instance variables are initialized to standard default variables. 
                    - the default values are null for object variables and 0 for all base types except boolean variables (Which are false by default)
                2. The constructor for the new object is called with the parameters specified
                    -the constructor fills in meaningful values for the instance variables and performs any additional computations that must be done to create this object
                3. After the constructor returns, the "new" operator returns a reference (a memory address) to the newly created object
                    - if the expression is int he form of an assignment statement, then this address is stored in the object variable, so the object refers to this newly created object
            
    Number Objects
        -We sometimes want to store nubmers as objects, but base type numbers are not themselves objects, as we have noted. To get around this obstacle,
        Java defines a wrapper class for each numberic base type. We call these classes number classes. 

        These examples will follow the format of
            Base Type
            Creation Example
            Access Example

            Byte 
            n = new Byte((byte)34);
            n.byteValue();

            short
            n = new Short((short)100);
            n.shortValue();

            int
            n = new Integer(1045);
            n.intValue();

            long
            n = new Long(10849L);
            n.longValue();

            float
            n = new Float(3.93F);
            n.floatValue();

            double
            n = new Double(3.934);
            n.doubleValue();

    String Objects
        -A string is a sequence of characters that come from some alphabet (the set of all possible characters). 
            -Each character C that makes up a string s can be referenced by its index in the string
            -Each index starts and 0 and ends at s length -1
            -In java, the alphabet used to define strings is the Unicode international character set. a 16-bit character encoding that covers most used written languages
            -Other languages tend to use the smaller ASCII character set
            -Java also defines a special built-in class of objects called String objects.


        -String concatenation can be done with the + operator
            String myname = "Lucas" + " Goldman"
    
    Object References
        -creating a new object involves the use of the "new" operator to allocate the object's memory space and use the object's constructor to initialize this space.
            -The location, or address of this space is then typically assigned to a reference variable.
        -Therefore a reference variable can be viewed as a pointer to some object. 
            -It is as if the variable is a holder for a remote control that can be used to control the newly created object (the device).
             that is, the variable has a way of pointing at the object and asking it to do things or give us access to its data.  
    
    The Dot Operator
        -Every object reference variable must refer to some object, unless it is null, in which case it points to nothing.
        -One of the primary uses of an object reference variable is to access the members of the class for this object, an instance of its class. 
            -this access is performed with the dot(".") operator. 
        -When you pass a method parameters it will try to find a function signature that matches this type

    Instance Variables
        -Java classes can define instance variables, which are also called fields.
            -these variables represent the data associated with the objects of a class. 
            -Instance variables must have a type, which can either be a base type, or a reference type.

    Variable Modifiers   
        Scope Modifiers:
        -public instance variables are accessible by everyone
        -private instance variables are only accessible by the methods defined inside that class - subclasses cannot access these
        -protected instance variables are only accessible by methods of the same package, or subclasses
        
        Usage Modifiers:
        -static keyword is used to declare a variable that is associated with the class, not with individualy instances of that class.
            -static variables are used to store "global" information about a class
                -ex you can use a static variable to keep track of the total number of any given object created
                -static variables exist even if no instance of their class is created
        -final instance variable is one that mu;st be assigned an initial value, and then can never be assigned a new value after that. 
            -if it is a base type, then it is a constant 

    Enum Types
        -Java supports enumerated types called enums. These are the types that are only allowed to take on values that come from a specified set of names. 
        -they are declared inside of a class as follows:
            modifier enum name { value_name0, value_name1, ... , value_name(n-1)};
        -the modifier can be public, private, or protected
        -the name of this enum, can be any legal java identifier

        public class DayTripper{
            public enum Day {MON, TUE, WED, THU, FRI, SAT, SUN};
            public static void main(String[] args){
                Day d = Day.MON;
                System.out.println("Initially d is " + d);
                d = Day.WED;
                System.out.println("Then it is " + d);
                Day t = Day.valueOf("WED");
                System.out.println("I say d and t are the same: " + (d == t));
            }
        }

        the output of this is:
            
            initially d is MON
            then it is WED
            I say d and t are the same: true

    Methods
        -methods are functions that can be called on an object
        -methods accept parameters are arguments and their behavior depends on the object they belong to
        -methods have 2 parts, the signature, and the body
            -the signature defines the parameters a method will accept
            -the body defines the functionality of the method
        
        the scope modifiers that can be used for variables have a similar use for functions

    Declaring Methods
        -the syntax is as follows:
        modifiers type name(type0 parameter0, type1 parameter1... ){
            // method body...
        }
        
    
    Method Modifiers
        - public: Anyone can call public methods
        - protected: Only methods of the same package or of subclasses can call a protected method
        - private: Only methods of the same class (not methods of a sublcass) can call a private method
        - (friendly): If none of the other modifiers are used, then the method is friendly. Friendly methods can only be called by objects of classes in the same package

        the above modifiers may be preceded by additional modifiers:
        -abstract: A method declared as abstract has no code. The signature of such a method is followed by a semicolon with no method body
        -final: This is a method that cannot be overriden by a subclass
        -static: This is a method that is associated with the class itself, and not with a particular instance of this class.
         static methods can also be used to change the state of static variables associated with a class (provided these variables are not final);

    Return Types
        -A method definition must specify the type of value the method will return. If the method does not return a value, then the keywrod void must be used.
            -if the return type is void, the method is called a procedure, otherwise it is a function

    Parameters
        -A methods parameters are defined in a comma-seperated list enclosed in parentheses after the name of the method. 
            -a parameter consists of two parts, the parameter type and the parameter name. If a method has no parameters then only an empty pair of parentheses is used.

        -ALL PARAMETERS ARE PASSED BY VALUE
            -HOWEVER, this also means references are passed by value (think of passing a pointer in c++, points to same memory)
        
    Constructors
        -A constructor is a special kind of method that is used to initialize newly created objects. 
        -Java has a special way to declare the constructor and invoke the constructor

        modifiers name(type0 parameter0, type1 parameter1, ...){
            //constructor body
        }

        constructor modifiers follow the same rules as normal methods, except that abstract, static, and final are not allowed

    Constructor Definition and Invocation
        -constructor chaining? - will get to it later
        -return statements are not allowed in a constructors body
        -constructors MUST be called using the "new" operator. 
        -upon invocation a new instance of this class is automatically created and its constructor is then called to initalize its instance variables
        -a class can have many constructors, but each must ahve a difference signature.

    The main Method
        Some Java classes are meant to be used by other classes, others are meant to be stand-alone programs.
            -classes that define stand-alone programs must contain one other special kind of method for a class - the main method
            -When we wish to execute a stand alone java program we reference the name of the class that defines this program by issuing the following command 
            
            java compiliedFileName

            -the Java run-time system looks for a compilied version of the class "compiliedFileName", then invokes the special main method in that class.

            -The arguements passsed as the parameter args to the main method are the commandline arguements given when the program is called. 
            -The args variable is an array of String objects 
        
        compile package and class
            javac class.java
            javac -d . class.java
            java packagename.class
    
    Statement Blocks and Local Variables
        the body of a method is called a statement block.
        -this is a sequence of statements and declarations to be performed by the curly braces

        statement blocks can contain declarations of local variables. These variables are declared inside of the statement body

    Expressions
    variables and constants are used in expressions to define new values and modify variables.
    Expressions involve the use of literals, variables, and operators.

        Literals
        -a literal is any "constant" value that can be used in an assignment or other expression.
        -java allows the following kind of literals:
            -null object reference - only object literal, and is defined from the general Object class
            -Boolean - true and false
            -Integer - any 32 bit integer
            -Floating point - any floating point value
    
    Operators
        assignment operator - =
        addition - +
        subtraction - -
        multiplication - *
        division - /
        modulo - %
        increment/decrement - ++i || i++/i--

    Casting
        double d1 = 3.2;
        int i1 = (int)d1; //value 3
        double d2 = (double)i1; //value 3.0
        
        java can perform implicit casting given THERE IS NO LOSS OF PRECISION. if there is it will cause compilation error
    Conditional Flow
        you get it, if else switch break etc
    Loops
        for, while, do while are as you expect
    Array
        you can access array length by array_name.length
        there are array_name.length - 1 numbered elements
        Array bounds are checked

        Declaration:
            element_type[] array_name = { initVal0, initVal1, initVal2, ...};

            element_type[] array_name; //if this is declared with a num type, initialized with all zeros
                                       //if it is an array of objecvts, they are all initialized to null references
            once we have declared an array in this way we can create the collection of cells for an array using this syntax:

            array_name = new element_type[length];

        Arrays are objects
            Arrays are objects
            if you say 
                arrayA = arrayB;
                arrayA[3] = 5;
                arrayB will be overwritten

        Cloning an array
            b = a.clone(); //b will not overwrite a

    Simple Output Methods
        Java provides a built-in static object, called System.out, that preforms output to the "standard output" device. Most operating system shells allow useres to redirect standard outputs to files or even as input to other programs
            -default output is java console window
            -the System.out object is an instance of the java.io.PrintStream class
    
    Simple Input using java.util.Scanner class
        -Just as there is a special object for performing output to the Java console window, there is a special object called System.in
        -performs input from the java console window
            -techincally the input is coming from the standard input device - computer keyboard echoing its characters in the java console
        -System.in is associated with the standard input device
        -A simple way of reading input with this object is to use it to create a Scanner object

            new Scanner(System.in)

        -The Scanner class has a number of convenient included methods that read fromt he given input stream.
            -for example the following chunk uses a Scanner object to process input

            import java.io.*;
            import java.util.Scanner;

            Scanner s = new Scanner(System.in);
            System.out.print("Enter your height in centimeters: ");
            float height = s.nextFloat();

        java.util.Scanner Methods
            -The scanner class reads the input stream and divides it into tokens.
                -tokens are contiguous strings of characters sperated by delimiters - special seperating characters
                    -the default delimiter is whitespace, tokens that are seperated by strings of spaces, tabs, and newlines, by default.
                -tokens can be read immediately as strings or a scanner object can convert a token to a base type, if the toke is in the right syntax
            -Scanner has the following methods for dealing with tokens:
                -hasNext(): Return true if and only if there is another token in the input stream.
                -next(): Return the next token string in the input stream; generate an error if there are no more tokens left
                -hasNext*Type*(): Return true if an only if there is another toke in the input stream and it can be interpreted as the corresponding base type, *Type* where *Type* can be Boolean, Byte, Double, Float, Int, Long, or Short
                -next*Type*(): Returns the next token in the input stream, returned as the abse type corresponding to *Type*, generate an error if there are no more tokens left OR if the next token can not be interpreted as a base type corresponding to *Type*
                
                Additionally, Scanner objects can process input line by line, ignoring delimiters, and even look for patterns within lines while doing so. 
                the methods for processing input int his way include the following:

                    -hasNextLine(): Returns true if and only if the input stream has another line of text
                    -nextLine(): Advances the input past the current line ending and returns the input that was skipped.
                    -findInLine(String s): Attempts to find a string matching the regular expression pattern s in the current line. If the pattern is found, it is returned and the scanner advances to the first character after this match. If not found the scanner returns a null and does not advance

    Nested Classes And Packages 
        A set of classes all defined in a common subdirectory can be a java package.

        Every file in a package starts with the line:
            package package_name
        The subdirectory containing the package must share the same name as the package

        We can define a package in a single file that contains several class definitions, but when it is compiled, all the classes will be compiled into seperate files in the same subdirectory
        In java we can use classes that are defined in other packages by prefixing class names with dots (the "." operator) that correspond to the other packages directory structures.

        ex.
            public boolean Temperature(TA.Measures.Thermometer thermometer, int temperature){
                //...
            }
                    
        The function Temperature takes a class thermometer as a parameter. Thermometer is defined in the TA package in a subpackage called Measures.
            -this corresponds to the directory structure, so the directory would look like this: "/TA/Measures/Thermometer"

        In java we can use the "import" keyword to include external classes or entire packages in the current file. 
        To import an individual class from a specific package we type the following at the beginning of the file:
            import packageName.classNames;

        For example we could type:

            package Project;
            import TA.Measures.Thermometer;
            import TA.Measures.Scale;

        at the beginning of a Project package to indicate that we are importing the classes named TA.Measures.Thermometer and TA.Measures.Scale.
            -the Java run-time environment will now search these classes to match identifiers to classes, methods, and instance variables that we use in our program.

        We can also import an entire package, by using the following syntax:
            import <packageName>.*;

        For example:
            package student;
            import TA.Measures.*;
            //we import all classes from Measures package
        
        

        





        
